# -*- coding: utf-8 -*-
"""
/***************************************************************************
 qcrocoflowDockWidget
                                 A QGIS plugin
 A QGIS plugin to manage CROCO projectsqcrocoflow
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-12-03
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Emmanuel Poizot
        email                : emmanuel.poizot@lecnam.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'qcrocoflow_dockwidget_base.ui'))

class qcrocoflowDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, _iface, parent=None):
        """Constructor."""
        super(qcrocoflowDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        # Get pointer on QGIS interface
        self.iface  = _iface

        self.myQMenuBar = QtWidgets.QMenuBar(self)
        # Project
        projectMenu = self.myQMenuBar.addMenu('Project')
        newProjectAction = QtWidgets.QAction('New', self)
        newProjectAction.triggered.connect(self.printHello)
        projectMenu.addAction(newProjectAction)
        # ---
        openProjectAction = QtWidgets.QAction('Open', self)
        openProjectAction.triggered.connect(self.printHello)
        projectMenu.addAction(openProjectAction)
        # ---
        saveProjectAction = QtWidgets.QAction('Save', self)
        saveProjectAction.triggered.connect(self.printHello)
        projectMenu.addAction(saveProjectAction)
        # ---
        projectMenu.addSeparator()
        # ---
        quitProjectAction = QtWidgets.QAction('Quit', self)
        quitProjectAction.triggered.connect(self.printHello)
        projectMenu.addAction(quitProjectAction)

        # Grid
        gridMenu = self.myQMenuBar.addMenu('Grid')
        newGridAction = QtWidgets.QAction('New', self)
        newGridAction.triggered.connect(self.printHello)
        gridMenu.addAction(newGridAction)
        # ---
        openGridAction = QtWidgets.QAction('Open', self)
        openGridAction.triggered.connect(self.printHello)
        gridMenu.addAction(openGridAction)
        # ---
        gridMenu.addSeparator()
        # ---
        initialConditionAction = QtWidgets.QAction('IC', self)
        initialConditionAction.triggered.connect(self.printHello)
        gridMenu.addAction(initialConditionAction)
        # ---
        openBoundaryConditionAction = QtWidgets.QAction('OBC', self)
        openBoundaryConditionAction.triggered.connect(self.printHello)
        gridMenu.addAction(openBoundaryConditionAction)
        #self.setupUi(self)
    def printHello(self):
        print('Hello')

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
