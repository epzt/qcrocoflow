# -*- coding: utf-8 -*-
"""
/***************************************************************************
 qcrocoflowDockWidget
                                 A QGIS plugin
 Plugin to manage CROCO intial and result files
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Emmanuel Poizot
        email                : emmanuel.poizot@lecnam.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from datetime import datetime, timedelta

from qgis.PyQt import QtGui, QtWidgets, uic, Qt

from PyQt5.QtWidgets import QDialog, QMessageBox, QFileDialog, QVBoxLayout, QComboBox
from .qcrocoflow_config import *

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'qcrocoflow_timereference_dialog.ui'), resource_suffix='') # Change 13/05/2022
class qcrocoflowTIMEREFERENCE(QDialog, FORM_CLASS):
    def __init__(self, _minT, _maxT, parent=None):
    # Constructor of qcrocoflowCROCO2QGIS
        super(qcrocoflowTIMEREFERENCE, self).__init__(parent)
        # Final Setup
        self.setupUi(self)
        # Variables iitialisations
        self.minDateTimeWidget.setDateTime(_minT)
        self.minDateTimeWidget.setDateRange(_minT, _maxT)
        self.maxDateTimeWidget.setDateTime(_maxT)
        self.maxDateTimeWidget.setDateRange(_minT, _maxT)
        # Store initial min and max time reference
        self.minTime = _minT
        self.maxTime = _maxT

        self.crocoTimeReferenceRadioButton.toggled.connect(self.ReferenceTimeChanged)
        self.pythonTimeReferenceRadioButton.toggled.connect(self.ReferenceTimeChanged)

    def ReferenceTimeChanged(self):
        if self.crocoTimeReferenceRadioButton.isChecked():
            minT = datetime.fromtimestamp(self.minTime.timestamp() + DELTASECONDSREFS)
            maxT = datetime.fromtimestamp(self.maxTime.timestamp() + DELTASECONDSREFS)
            self.minDateTimeWidget.setDateTime(minT)
            self.minDateTimeWidget.setDateRange(minT, maxT)
            self.maxDateTimeWidget.setDateTime(maxT)
            self.maxDateTimeWidget.setDateRange(minT, maxT)
        else:
            self.minDateTimeWidget.setDateTime(self.minTime)
            self.minDateTimeWidget.setDateRange(self.minTime, self.maxTime)
            self.maxDateTimeWidget.setDateTime(self.maxTime)
            self.maxDateTimeWidget.setDateRange(self.minTime, self.maxTime)

    def GetMinRefrenceTime(self) -> datetime:
        return self.minDateTimeWidget.dateTime().toPyDateTime()
    def GetMaxRefrenceTime(self) -> datetime:
        return self.maxDateTimeWidget.dateTime().toPyDateTime()