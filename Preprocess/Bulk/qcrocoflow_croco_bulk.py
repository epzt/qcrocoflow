"""
/***************************************************************************
 qcrocoflow_croco_grid_dialog
                                 Aa QGIS plugin
 qcrocoflow_crocogrid
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-03
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Jonathan nejmann & Emmanuel Poizot
        emails               : jonathan.nejmann@hotmail.fr
                               emmanuel.poizot@lecnam.net
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from netCDF4 import Dataset
import numpy as np
import xarray as xr
from .qcrocoflow_croco_ERA5 import *
from PyQt5.QtCore import Qt
from PyQt5.QtCore import Qt
from PyQt5 import QtGui, QtWidgets

class qcrocoflow_croc_bulk():
    def __init__(self, _parent=None):
        self.mainApp = _parent

    def compute_time_values(self, time, itolap, dt, tlen0):
        """
        Compute the time values for the overlap at the beginning and the end
        """
        # Changer le curseur de la souris à un sablier

        for aa in range(itolap):
            time[aa] = time[itolap] - (itolap - aa) * dt

        for aa in range(itolap):
            time[tlen0 + itolap + aa] = time[tlen0 + itolap] + aa * dt
        return time

    def process_files(self, era5_dir, y_min, y_max, m_min, m_max, grid_dir, title, grdname, Dmin, Yorig, Mmin, directory):
        """
        Process all files in the given directory
        """
        # Changer le curseur de la souris à un sablier
        QtWidgets.QApplication.setOverrideCursor(QtGui.QCursor(Qt.WaitCursor))
        try:
            # Open the croco grid file
            croco_grid = xr.open_dataset(os.path.join(grdname))

            # Extract the variables
            eta_rho = croco_grid['eta_rho']
            xi_rho = croco_grid['xi_rho']
            angle = croco_grid['angle']

            for Y in range(y_min, y_max + 1):
                if Y == y_min:
                    mo_min = m_min
                else:
                    mo_min = 1

                if Y == y_max:
                    mo_max = m_max
                else:
                    mo_max = 12

                for M in range(mo_min, mo_max + 1):
                    print('\n')
                    print(f"Processing year {Y} - month {M}")
                    print('\n')

                    # Open the NetCDF file
                    with Dataset(os.path.join(era5_dir, f"T2M_Y{Y}M{M}.nc")) as nc:

                        # Extract the time variable
                        era5_time = nc.variables['time'][:]

                    # Compute the mean difference between consecutive time values
                    dt = np.mean(np.gradient(era5_time))
                    print(f"dt={dt}")

                    # Compute the length of the time variable
                    tlen0 = len(era5_time)
                    print(f"tlen0={tlen0}")

                    # Compute the overlap
                    freq = 1  # hourly
                    itolap_era5 = 2
                    itolap = freq * itolap_era5

                    # Compute the total length of the time array
                    tlen = tlen0 + 2 * itolap
                    print(f"tlen={tlen}")
                    print(f"Overlap is {itolap_era5} records before and after")

                    # Initialize the time array
                    time = np.zeros(tlen)

                    # Assign the ERA5 time values to the appropriate portion of the time array
                    time[itolap: tlen0 + itolap] = era5_time

                    print("=====================")
                    print("Compute time for croco file")
                    print("=====================")

                    time = self.compute_time_values(time, itolap, dt, tlen0)

                    print("=====================")
                    print("Create the frc/blk netcdf file")
                    print("=====================")
                    blkname = f"{title}_bulkY{Y}M{M:02d}.nc"
                    directorybulk = os.path.join(directory, blkname)
                    print(f"Create a new bulk file: {blkname}")
                    self.initialize_netcdf_bulk_file(grdname, title, time, 0, directorybulk)
                    self.add_netcdf_global_attributes_bulk_file(directorybulk, Yorig, Mmin, Dmin, 'ERA5')
                    crocoflow_croco_ERA5.interp_ERA5(era5_dir, Y, M, directorybulk, angle, tlen0)
                    print(" ")

        finally:
            # Rétablir le curseur de la souris
            QtWidgets.QApplication.restoreOverrideCursor()
    def get_year_month_netcdf_bulk_file(self, era5_dir):
        """
        Get the minimum and maximum year and month
        """
        # Initialize variables to hold the minimum and maximum year and month
        y_min, y_max, m_min, m_max = float('inf'), float('-inf'), float('inf'), float('-inf')

        # Loop through all the files in the ERA5 directory
        for file in os.listdir(era5_dir):
            # Extract the year and month from the file name
            YM = file.split('_')[1][1:-3]
            Y = int(YM[:4])
            try:
                M = int(YM[4:])
            except ValueError:
                M = int(YM[5:])  # If the month part starts with 'M', skip the 'M'
                print(f"Error converting month to int in file {file}, skipped 'M'")

            # Update the minimum and maximum year and month if necessary
            y_min = min(y_min, Y)
            y_max = max(y_max, Y)
            m_min = min(m_min, M)
            m_max = max(m_max, M)

        return y_min, y_max, m_min, m_max

    def initialize_netcdf_bulk_file(self, grdname, title, bulkt, bulkc, directory):
        grd = nc.Dataset(grdname, 'r')
        L = len(grd.dimensions['xi_psi'])
        M = len(grd.dimensions['eta_psi'])
        grd.close()
        Lp = L + 1
        Mp = M + 1
        frcname = directory

        nw = nc.Dataset(frcname, 'w', format='NETCDF4')
        nw.createDimension('xi_rho', Lp)
        nw.createDimension('eta_rho', Mp)
        nw.createDimension('xi_psi', L)
        nw.createDimension('eta_psi', M)
        nw.createDimension('xi_u', L)
        nw.createDimension('eta_u', Mp)
        nw.createDimension('xi_v', Lp)
        nw.createDimension('eta_v', M)
        nw.createDimension('bulk_time', None)

        var = nw.createVariable('bulk_time', 'f8', ('bulk_time',))
        var.long_name = 'bulk formulation execution time'
        var.units = 'days'
        var.cycle_length = bulkc

        # Create other variables similarly...
        var = nw.createVariable('tair', 'f8', ('bulk_time', 'eta_rho', 'xi_rho'))
        var.long_name = 'surface air temperature'
        var.units = 'Celsius'

        var = nw.createVariable('rhum', 'f8', ('bulk_time', 'eta_rho', 'xi_rho'))
        var.long_name = 'relative humidity'
        var.units = 'fraction'

        var = nw.createVariable('prate', 'f8', ('bulk_time', 'eta_rho', 'xi_rho'))
        var.long_name = 'precipitation rate'
        var.units = 'cm day-1'

        var = nw.createVariable('wspd', 'f8', ('bulk_time', 'eta_rho', 'xi_rho'))
        var.long_name = 'wind speed 10m'
        var.units = 'm s-1'

        var = nw.createVariable('radlw', 'f8', ('bulk_time', 'eta_rho', 'xi_rho'))
        var.long_name = 'net outgoing longwave radiation'
        var.units = 'Watts meter-2'
        var.positive = 'upward flux, cooling water'

        var = nw.createVariable('radlw_in', 'f8', ('bulk_time', 'eta_rho', 'xi_rho'))
        var.long_name = 'downward longwave radiation'
        var.units = 'Watts meter-2'
        var.positive = 'downward flux, warming water'

        var = nw.createVariable('radsw', 'f8', ('bulk_time', 'eta_rho', 'xi_rho'))
        var.long_name = 'solar shortwave radiation'
        var.units = 'Watts meter-2'
        var.positive = 'downward flux, heating water'

        var = nw.createVariable('sustr', 'f8', ('bulk_time', 'eta_u', 'xi_u'))
        var.long_name = 'surface u-momentum stress'
        var.units = 'Newton meter-2'

        var = nw.createVariable('svstr', 'f8', ('bulk_time', 'eta_v', 'xi_v'))
        var.long_name = 'surface v-momentum stress'
        var.units = 'Newton meter-2'

        var = nw.createVariable('uwnd', 'f8', ('bulk_time', 'eta_u', 'xi_u'))
        var.long_name = '10m u-wind component'
        var.units = 'm/s'

        var = nw.createVariable('vwnd', 'f8', ('bulk_time', 'eta_v', 'xi_v'))
        var.long_name = '10m v-wind component'
        var.units = 'm/s'

        nw.title = title
        nw.date = str(datetime.datetime.now())
        nw.grd_file = grdname
        nw.type = 'CROCO heat flux bulk forcing file'

        for tndx, t in enumerate(bulkt):
            if tndx % 20 == 0:
                print(f'Time Step Bulk: {tndx} of {len(bulkt)}')
            nw.variables['bulk_time'][tndx] = t

        nw.close()
    def make_netcdf_bulk_file(self, era5_dir, mo_min, grid_dir, title, grdname, d_min, directory):
        """
        Main function
        """
        # variables
        y_orig = 2000
        mo_min = mo_min
        directory = directory
        d_min = d_min

        grid_dir = grid_dir
        era5_dir = era5_dir
        title = title
        grdname = grdname

        y_min, y_max, m_min, m_max = get_y_m(era5_dir)
        self.process_files(era5_dir, y_min, y_max, m_min, m_max, grid_dir, title, grdname, d_min, y_orig, mo_min, directory )

    def add_netcdf_global_attributes_bulk_file(self, filename, year, month, day, product='unknown'):
        """
        Add global attributes to a NetCDF file.

        Parameters:
        filename (str): The path to the NetCDF file.
        year (int): The origin year.
        month (int): The origin month.
        day (int): The origin day.
        product (str, optional): The product name. Defaults to 'unknown'.

        Returns:
        None
        """

        # Ensure the input file exists
        try:
            nc = Dataset(filename, 'a')
        except FileNotFoundError:
            print(f"File {filename} not found.")
            return

        # Assign default time values for hour, minute, and second
        hour = 0
        minute = 0
        second = 0

        # Create a datetime object from the input arguments
        origin_date = datetime.datetime(year, month, day, hour, minute, second)

        # Add global attributes
        nc.origin_date = origin_date.strftime('%d-%b-%Y %H:%M:%S')
        nc.product = product

        # Close the NetCDF file
        nc.close()