# -*- coding: utf-8 -*-
"""
/***************************************************************************
 qcrocoflow_crocogridDialog
                                 Aa QGIS pluginl
 qcrocoflow_crocogrid
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-03
        git sha              : $Format:%H$
        copyright            : (C) 2023 by john nejmann
        email                : @
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sqlite3

import numpy as np
from PyQt5.QtGui import QColor
from PyQt5.QtSql import QSqlDatabase, QSqlQuery
from PyQt5.QtWidgets import QComboBox, QDialog, QFileDialog, QMessageBox
from qgis.core import (QgsCoordinateReferenceSystem, QgsFeature, QgsGeometry,
                       QgsMapLayer, QgsPointXY, QgsProject, QgsRectangle,
                       QgsVectorLayer)
from qgis.gui import QgsMapToolEmitPoint, QgsMapToolExtent, QgsRubberBand
from qgis.utils import iface

from .qcrocoflow_cocogrid_dialog_base import Ui_qcrocoflow_crocogridDialogBase
from .scriptp.make_grid import make_grid_function


class qcrocoflow_crocogridDialog(QDialog, Ui_qcrocoflow_crocogridDialogBase):

    def __init__(self, iface, parent=None):
        """Constructor."""
        super(qcrocoflow_crocogridDialog, self).__init__(parent)
        self.directory = ""  
        self.iface = iface
        self.parent = parent
        self.setupUi(self)
        self.Environnement_2.setToolTip("Bonjour")
        self.connect_signals_and_slots()
        self.titre = ""
        self.grid_layer = None
        self.selected_extent = None
        self.dl = 0.00
        self.ddButton.setChecked(True)
        self.selecttopoComboBox.addItems(['', 'etopo2.nc', 'gebco.nc'])
        root_path = os.path.dirname(os.path.dirname(__file__))
        project_path = os.path.join(root_path, "project")
        self.db_path = os.path.join(project_path, "Grid.db")
        self.db = QSqlDatabase.addDatabase('QSQLITE')
        self.db.setDatabaseName(self.db_path)
        if not self.db.open():
            QMessageBox.critical(self, "Database Error", self.db.lastError().text())
        self.load_projects()

        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        
    ###################
    # connect boutons #
    ###################

    def connect_signals_and_slots(self):
        self.selectenvButton.clicked.connect(self.select_work_environment_directory)
        self.gridprojecttitleLineEdit.textChanged.connect(self.on_gridprojecttitle_text_changed)
        self.gridnameLineEdit.textChanged.connect(self.on_gridname_text_changed)
        self.dlDoubleSpin.textChanged.connect(self.on_dl_b_text_changed)
        self.hminSpinBox.textChanged.connect(self.on_hmin_b_text_changed)
        self.selecttopoButton.clicked.connect(self.select_topography_file)
        self.savevariablesButton.clicked.connect(self.save_variables_to_file)
        self.selectzoneButton.clicked.connect(self.select_zone)
        self.lonminLineEdit.textChanged.connect(self.update_grid)
        self.lonmaxLineEdit.textChanged.connect(self.update_grid)
        self.latminLineEdit.textChanged.connect(self.update_grid)
        self.latmaxLineEdit.textChanged.connect(self.update_grid)
        self.ddButton.clicked.connect(self.update_coordinates_DD)
        self.dmButton.clicked.connect(self.update_coordinates_DM)
        self.dmsButton.clicked.connect(self.update_coordinates_DMS)
        self.gridexecuteButton.clicked.connect(self.on_execute_grid)
        self.selecttopoComboBox.currentIndexChanged.connect(self.select_bathymetry_file_from_combobox)
        self.opengridprojectComboBox.currentIndexChanged.connect(self.update_variables)

############
# Workplace#
############

    def select_work_environment_directory(self):
        directory = QFileDialog.getExistingDirectory(self, "Select Environment Directory")
        if directory:
            self.Environnement_2.setText(directory)
            self.directory = directory
            self.parent.add_message("Le chemin d'accès est : " + directory, color='blue')


########
# Title#
########

    def on_gridprojecttitle_text_changed(self, text):
        self.titre = text

#############
# Grid name#
#############

    def on_gridname_text_changed(self, text):
        if not text.endswith('.nc'):
            text += '.nc'
        self.grdname = text

####################
# Grid resolution #
####################

    def on_dl_b_text_changed(self, text):
        try:
            self.dl = float(text)
            self.update_grid()
        except ValueError:
                self.dl = 0.00
                self.parent.add_message("Warning! the resolution of the grid must be greater than 0.", color='red')
#############################
# difine hmin#
#################################

    def on_hmin_b_text_changed(self, text):
        self.hmin = text


########################################
# Sélection d'un fichier topographique#
########################################
    def select_topography_file(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_filter = "Topography files (*.nc *.tif);;All files (*)"
        file_name, _ = QFileDialog.getOpenFileName(self, "Select Topography File", "", file_filter, options=options)

        if file_name:
            self.topodirLineEdit.setText(file_name)
            self.topo = file_name
            self.parent.add_message("Topography file:"+ self.topo, color='blue')

# Sélection d'un fichier topographique automatique#

    def select_bathymetry_file_from_combobox(self):
        file_name = self.selecttopoComboBox.currentText()

        # Get the directory of the current script
        script_dir = os.path.dirname(os.path.realpath(__file__))

        # Join the script directory with the file name to get the full path
        file_path = os.path.join(script_dir, file_name)

        if file_name and os.path.isfile(file_path):
            self.topodirLineEdit.setText(file_path)
            self.topo = file_path
            self.parent.add_message("Topography file:"+ self.topo, color='blue')
        else:
            QMessageBox.warning(self, "File not found",
                                f"The file {file_name} was not found in the script directory.")

################
# Select zone #
################


    def select_zone(self):
        # Check the project's coordinate system
        crs = QgsProject.instance().crs().authid()
        if crs != 'EPSG:4326':
            
            # Ask the user if they want to change the project's coordinate system
            msgBox = QMessageBox()
            msgBox.setText("Your current project is not in WGS84. Croco uses this global geodetic system. Would you like to switch to WGS84?")
            msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            returnValue = msgBox.exec()

            if returnValue == QMessageBox.Ok:
                # Change the project's coordinate system
                epsg_4326 = QgsCoordinateReferenceSystem('EPSG:4326')
                QgsProject.instance().setCrs(epsg_4326)
                
        self.map_tool = QgsMapToolExtent(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.map_tool)
        self.map_tool.extentChanged.connect(self.on_extent_changed)

    def on_extent_changed(self, extent):
        self.selected_extent = extent
        lon_min = extent.xMinimum()
        lon_max = extent.xMaximum()
        lat_min = extent.yMinimum()
        lat_max = extent.yMaximum()

        self.lonminLineEdit.setText(str(lon_min))
        self.lonmaxLineEdit.setText(str(lon_max))
        self.latminLineEdit.setText(str(lat_min))
        self.latmaxLineEdit.setText(str(lat_max))

    def create_grid(self):
        # If a grid layer already exists, remove it from the map
        if self.grid_layer is not None:
            QgsProject.instance().removeMapLayer(self.grid_layer.id())
            self.grid_layer = None

        # Ensure there is a selected extent and a positive dl value before creating the grid
        if self.selected_extent is None or self.dl <= 0:
            if self.dl <= 0:
                self.parent.add_message("Warning! the resolution of the grid must be greater than 0.", color='red')
            return

        lat_min = self.selected_extent.yMinimum()
        lat_max = self.selected_extent.yMaximum()
        lon_min = self.selected_extent.xMinimum()
        lon_max = self.selected_extent.xMaximum()

        lat_step = self.dl
        lon_step = self.dl

        latitudes = np.arange(lat_min, lat_max, lat_step)
        longitudes = np.arange(lon_min, lon_max, lon_step)

        self.add_grid_to_map(latitudes, longitudes)

            
        
    def add_grid_to_map(self, latitudes, longitudes):
        # Create a memory layer to hold the grid
        grid_layer = QgsVectorLayer("LineString?crs=epsg:4326", "Coordinate Grid", "memory")
        provider = grid_layer.dataProvider()

        # Begin the editing session for the grid layer
        grid_layer.startEditing()

        # Add the latitude lines to the grid
        for lat in latitudes:
            feature = QgsFeature()
            feature.setGeometry(QgsGeometry.fromPolylineXY([
                QgsPointXY(longitudes[0], lat),
                QgsPointXY(longitudes[-1], lat)]))
            provider.addFeature(feature)

        # Add the longitude lines to the grid
        for lon in longitudes:
            feature = QgsFeature()
            feature.setGeometry(QgsGeometry.fromPolylineXY([
                QgsPointXY(lon, latitudes[0]),
                QgsPointXY(lon, latitudes[-1])]))
            provider.addFeature(feature)

        # Commit the changes to the grid layer and update its extents
        grid_layer.commitChanges()
        grid_layer.updateExtents()

        # Add the grid layer to the map
        QgsProject.instance().addMapLayer(grid_layer)

        # Update self.grid_layer with the new grid
        self.grid_layer = grid_layer


    def update_grid(self): #manual mode
        try:
            lat_min = float(self.latminLineEdit.text())
            lat_max = float(self.latmaxLineEdit.text())
            lon_min = float(self.lonminLineEdit.text())
            lon_max = float(self.lonmaxLineEdit.text())
        except ValueError:
            # One of the text fields does not contain a valid float
            return

        self.selected_extent = QgsRectangle(lon_min, lat_min, lon_max, lat_max)

        self.create_grid()    

            
###############
# DD/DM/DMS #
###############
    def update_coordinates_DD(self):
        # Update coordinates to Decimal Degrees (DD) format
        self.lonminLineEdit.setText(str(self.selected_extent.xMinimum()))
        self.lonmaxLineEdit.setText(str(self.selected_extent.xMaximum()))
        self.latminLineEdit.setText(str(self.selected_extent.yMinimum()))
        self.latmaxLineEdit.setText(str(self.selected_extent.yMaximum()))

    def update_coordinates_DM(self):
        # Update coordinates to Degrees and Decimal Minutes (DM) format
        self.lonminLineEdit.setText(self.deg_to_dm(self.selected_extent.xMinimum()))
        self.lonmaxLineEdit.setText(self.deg_to_dm(self.selected_extent.xMaximum()))
        self.latminLineEdit.setText(self.deg_to_dm(self.selected_extent.yMinimum()))
        self.latmaxLineEdit.setText(self.deg_to_dm(self.selected_extent.yMaximum()))

    def update_coordinates_DMS(self):
        # Update coordinates to Degrees, Minutes, and Seconds (DMS) format
        self.lonminLineEdit.setText(self.deg_to_dms(self.selected_extent.xMinimum()))
        self.lonmaxLineEdit.setText(self.deg_to_dms(self.selected_extent.xMaximum()))
        self.latminLineEdit.setText(self.deg_to_dms(self.selected_extent.yMinimum()))
        self.latmaxLineEdit.setText(self.deg_to_dms(self.selected_extent.yMaximum()))

    def deg_to_dm(self, deg):
        d = int(deg)
        m = abs(deg - d) * 60
        return "{}°{}'".format(d, m)

    def deg_to_dms(self, deg):
        d = int(deg)
        m_temp = abs(deg - d) * 60
        m = int(m_temp)
        s = (m_temp - m) * 60
        return "{}°{}'{}\"".format(d, m, s)





##################
# Save variables#
#################
        
    def save_variables_to_file(self):
        directory = self.Environnement_2.text()
        title = self.gridprojecttitleLineEdit.text()
        grdname = self.gridnameLineEdit.text()
        dl = self.dlDoubleSpin.text()
        topo = self.topodirLineEdit.text()
        hmin = self.hminSpinBox.text()
        lat_min = self.latminLineEdit.text()
        lat_max = self.latmaxLineEdit.text()
        lon_min = self.lonminLineEdit.text()
        lon_max = self.lonmaxLineEdit.text()
        
        if not self.titre:
            QMessageBox.warning(self, "Warning", "Il manque la variable: titre")
            return
            
        if not directory:
            QMessageBox.warning(self, "Warning", "Il manque la variable: environment_directory")
            return

        if not grdname:
            QMessageBox.warning(self, "Warning", "Il manque la variable: grdname")
            return

        if not dl:
            QMessageBox.warning(self, "Warning", "Il manque la variable: dl")
            return

        if not topo:
            QMessageBox.warning(self, "Warning", "Il manque la variable: topo")
            return

        if not hmin:
            QMessageBox.warning(self, "Warning", "Il manque la variable: hmin")
            return

        # Ajouter ces nouvelles lignes pour valider les valeurs de latitude et de longitude
        if not lat_min:
            QMessageBox.warning(self, "Warning", "Il manque la variable: lat_min")
            return

        if not lat_max:
            QMessageBox.warning(self, "Warning", "Il manque la variable: lat_max")
            return

        if not lon_min:
            QMessageBox.warning(self, "Warning", "Il manque la variable: lon_min")
            return

        if not lon_max:
            QMessageBox.warning(self, "Warning", "Il manque la variable: lon_max")
            return

        # creation d'un sql
        # Créez et configurez la base de données
        db = QSqlDatabase.addDatabase('QSQLITE')
        db.setDatabaseName(self.db_path)

        if not db.open():
            QMessageBox.critical(self, "Database Error", db.lastError().text())
            return

        query = QSqlQuery()

        sql = """
                CREATE TABLE IF NOT EXISTS Grid (
                    title TEXT PRIMARY KEY,
                    directory TEXT,
                    grdname TEXT,
                    dl REAL,
                    hmin REAL,
                    topo TEXT,
                    lat_min REAL,
                    lat_max REAL,
                    lon_min REAL,
                    lon_max REAL
                )
                """

        if not query.exec_(sql):
            QMessageBox.critical(self, "Database Error", query.lastError().text())
            return

        sql = """
                INSERT OR REPLACE INTO Grid 
                (title, directory, grdname, dl, hmin, topo, lat_min, lat_max, lon_min, lon_max)
                VALUES 
                (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """

        query.prepare(sql)
        query.addBindValue(title)
        query.addBindValue(directory)
        query.addBindValue(grdname)
        query.addBindValue(dl)
        query.addBindValue(hmin)
        query.addBindValue(topo)
        query.addBindValue(lat_min)
        query.addBindValue(lat_max)
        query.addBindValue(lon_min)
        query.addBindValue(lon_max)

        if not query.exec_():
            QMessageBox.critical(self, "Database Error", query.lastError().text())
            return

        QMessageBox.information(self, "Information", "Variables saved to the file and database.")

    ######################
    # Grid.exe
    ######################

    def on_execute_grid(self):
        directory = self.Environnement_2.text()
        title = self.gridprojecttitleLineEdit.text()
        grdname = self.gridnameLineEdit.text()
        lon_min = float(self.lonminLineEdit.text())
        lon_max = float(self.lonmaxLineEdit.text())
        lat_min = float(self.latminLineEdit.text())
        lat_max = float(self.latmaxLineEdit.text())
        dl = float(self.dlDoubleSpin.text())
        hmin = float(self.hminSpinBox.text())
        topo = self.topodirLineEdit.text()
         

        make_grid_function(title, grdname, lon_min, lon_max, lat_min, lat_max, dl, hmin, topo, directory)

    ####################
    # Open project
    ##################
    def load_projects(self):
        # Execute a request for get all titles of projects pour obtenir tous les titres de projets
        query = QSqlQuery(self.db)
        query.exec_("SELECT title FROM Grid")

        # clear ComboBox
        self.opengridprojectComboBox.clear()
        self.opengridprojectComboBox.addItem("")

        # Ajoutez chaque titre à la ComboBox
        while query.next():
            primary_key = query.value(0)
            self.opengridprojectComboBox.addItem(primary_key)



    def update_variables(self, index):
        # Obtenez le titre du projet sélectionné
        selected_title = self.opengridprojectComboBox.itemText(index)

        # Execut requete for get variables of selected projet
        query = QSqlQuery(self.db)
        query.prepare("SELECT * FROM Grid WHERE title = :title")
        query.bindValue(":title", selected_title)
        query.exec_()

        if query.next():
            directory = query.value(1)
            grdname = query.value(2)
            dl = query.value(3)
            hmin = query.value(4)
            topo = query.value(5)
            lat_min = query.value(6)
            lat_max = query.value(7)
            lon_min = query.value(8)
            lon_max = query.value(9)

            # MAJ variables
            self.Environnement_2.setText(directory)
            self.gridprojecttitleLineEdit.setText(selected_title)
            self.gridnameLineEdit.setText(grdname)
            self.dlDoubleSpin.setValue(float(dl))
            self.hminSpinBox.setValue(hmin)
            self.topodirLineEdit.setText(topo)
            self.latminLineEdit.setText(str(lat_min))
            self.latmaxLineEdit.setText(str(lat_max))
            self.lonminLineEdit.setText(str(lon_min))
            self.lonmaxLineEdit.setText(str(lon_max))

